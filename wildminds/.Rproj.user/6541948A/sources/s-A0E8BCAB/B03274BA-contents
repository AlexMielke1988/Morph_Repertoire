#' Randomize bouts and extract information on expected Antecedent -> consequent transitions. Extracts all different ways (sum of transitions, conditional probability, joint probability, point-wise mutual information)
#'
#' @param elem.bout list of vectors of elements. Co-occurring elements are marked by the '%' symbol (e.g., mount%slap).
#' @param antecedent first element in transition
#' @param consequent second element in transition
#' @param observed vector of observed probabilities to calculate z and p-values
#' @param it number of iterations of assignments
#' @param cores number of cores for parallel randomization (default is 2)
#' @param trials number of random trials to calculate expected values and z, p etc
#' @param type how to determine probability of elements for randomization. If 'across', frequencies of elements are the same across all bouts, while 'within' shuffles elements within a bout
#' @param output default is 'expected' (give only summary values across all randomizations); can be set to 'raw' (give the value for all randomizations)
#' @param ran.method for co-occurring elements, how should they be split? Can be 'random' (order is randomised), or 'sample' (randomly choose any)
#'
#'
#' @return Returns a list with 'sum' (expected sum of transitions), 'prob' (expected probability of transition), 'joint' (expected joint probability), 'p-value' (comparison of observed with all randomizations), 'z' (z value of observed against all randomizations)
#'
#' @importFrom parallel parLapply makeCluster detectCores clusterExport stopCluster
#' @importFrom doParallel registerDoParallel
#' @importFrom dplyr mutate arrange desc as_tibble select all_of na_if inner_join left_join bind_rows bind_cols rename mutate_all distinct row_number summarize tibble filter count distinct
#' @importFrom stringr str_detect str_split str_replace_all str_to_title str_to_lower
#' @importFrom magrittr %>%
#' @importFrom tidyr replace_na gather separate unite
#' @importFrom arrangements combinations
#'
#'
#' @author Alex Mielke
#' @export
#'
#' @examples
#' ###
randomized_transition_info <- function(elem.bout,
                                       antecedent,
                                       consequent,
                                       observed = NULL,
                                       it = 1,
                                       cores = 2,
                                       trials = 100,
                                       type = "across",
                                       output = "expected",
                                       ran.method = "random") {
  # unlist and clean element bout
  elem.bout <- elem.bout %>%
    map(str_replace_all,
      pattern = "-|/|_",
      replacement = ""
    )

  # prepare summary of element-level info for all bouts
  all.elements <- transitions_frame(elem.bout = elem.bout,
                                    all.possible = TRUE)

  # count antecedent and consequent
  count.antecedent <-
    all.elements$count.antecedent
  count.consequent <-
    all.elements$count.consequent

  prob.antecedent <-
    all.elements$prob.antecedent
  prob.consequent <-
    all.elements$prob.consequent

  mycluster <- makeCluster(cores, type = "PSOCK")
  # export the relevant information to each core
  clusterExport(
    cl = mycluster,
    c(
      "elem.bout",
      "antecedent",
      "consequent",
      "unlist_list",
      "unlist_vector",
      "elem_bout_matrix",
      "randomize_bouts",
      "transition_info",
      "Reduce",
      "observed",
      "type",
      "it",
      "output",
      "ran.method",
      "prob.consequent",
      "prob.antecedent"
    ),
    envir = environment()
  )
  registerDoParallel(mycluster)
  # run parallel loop


  randomized.probs <- lapply(1:trials, function(x) {
    ran.bouts <- randomize_bouts(elem.bout = elem.bout,
                                 type = type,
                                 unlisting = TRUE)

    ran.bout.unlisted <-
      unlist_list(ran.bouts,
                  method = ran.method)

    # create data frame that contains all sequences as 'sentences' separated by space
    elem.df <-
      data.frame(elem = unlist(
        map(ran.bout.unlisted, paste, collapse = " "),
        recursive = F,
        use.names = F
      ))

    # use tidytext functions to create bigrams
    elem.bi <- elem.df %>%
      unnest_tokens(bigram,
                    .data$elem,
                    token = "ngrams",
                    n = 2,
                    to_lower = FALSE
      ) %>%
      dt_separate(.data$bigram, c("antecedent", "consequent"), sep = " ") %>%
      group_by(.data$antecedent, .data$consequent) %>%
      summarize(count = n()) %>%
      ungroup() %>%
      drop_na() %>%
      suppressMessages()


    # create antecedent/consequent table
    ant_cons <- data.frame(antecedent = as.character(antecedent),
                           consequent = as.character(consequent)) %>%
      left_join(elem.bi,
                by = c('antecedent' = 'antecedent',
                       'consequent' = 'consequent'))

    ant_cons$count <- ifelse(is.na(ant_cons$count), 0, ant_cons$count)


    # Calculate common occurrences
    AandB <- ant_cons$count

    # occurrences of A and B
    Aall <- ant_cons %>%
      group_by(.data$antecedent) %>%
      summarise(value = sum(.data$count)) %>%
      ungroup()

    Aall <- ant_cons %>%
      left_join(Aall,
                by = c('antecedent' = 'antecedent')) %>%
      select(.data$value) %>%
      unlist(recursive = FALSE, use.names = FALSE)

    Ball <- ant_cons %>%
      group_by(.data$consequent) %>%
      summarise(value = sum(.data$count)) %>%
      ungroup()

    Ball <- ant_cons %>%
      left_join(Ball,
                by = c('consequent' = 'consequent')) %>%
      select(.data$value) %>%
      unlist(recursive = FALSE, use.names = FALSE)

    # Occurrences of A but not B
    AnotB <- Aall - AandB
    # Occurrences of B but not A
    BnotA <- Ball - AandB
    # Occurrences of not A and not B
    notAnotB <- length(ran.bout.unlisted %>%
                         unlist(recursive = FALSE, use.names = FALSE)) - Ball - Aall


    ran.sum <- AandB
    ran.joint <- AandB / sum(elem.bi$count)
    ran.prob <- AandB / Aall
    ran.mi <-
      (log((AandB / sum(elem.bi$count)) /
        (
          Aall / sum(elem.bi$count) *
            Ball / sum(elem.bi$count)
        ))) /
        (-1 * log(AandB / sum(elem.bi$count)))


    return(list(
      sum = ran.sum,
      prob = ran.prob,
      mi = ran.mi,
      joint.prob = ran.joint
    ))
  })
  stopCluster(mycluster)

  ran.prob <- lapply(randomized.probs, function(x) {
    x$prob
  })
  ran.sum <- lapply(randomized.probs, function(x) {
    x$sum
  })
  ran.mi <- lapply(randomized.probs, function(x) {
    x$mi
  })
  ran.joint <- lapply(randomized.probs, function(x) {
    x$joint.prob
  })

  ran.prob <- do.call(cbind, ran.prob)
  ran.sum <- do.call(cbind, ran.sum)
  ran.mi <- do.call(cbind, ran.mi)
  ran.joint <- do.call(cbind, ran.joint)


  if (output == "raw") {
    return(list(
      prob = ran.prob,
      sum = ran.sum,
      mi = ran.mi,
      joint.prob = ran.joint
    ))
  }

  ######### compare randomized and observed
  probs <- rowMeans(ran.prob, na.rm = T)
  probs[is.na(probs)] <- 0

  sums <- rowMeans(ran.sum, na.rm = T)
  sums[is.na(sums)] <- 0

  mi <- rowMeans(ran.mi, na.rm = T)
  mi[is.na(mi)] <- 0

  joint <- rowMeans(ran.joint, na.rm = T)
  joint[is.na(joint)] <- 0

  pvalue <- sapply(1:length(antecedent), function(x) {
    mean(observed[x] <= ran.prob[x, ])
  })
  pvalue[is.na(pvalue)] <- 0.5

  z <- sapply(1:length(antecedent), function(x) {
    (observed[x] - mean(ran.prob[x, ])) / sd(ran.prob[x, ])
  })
  z[is.na(z)] <- 0.5

  return(list(
    sum = sums,
    prob = probs,
    mi = mi,
    joint = joint,
    pvalue = pvalue,
    z = z
  ))
}
